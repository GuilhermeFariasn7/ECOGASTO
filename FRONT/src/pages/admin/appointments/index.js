import Axios from 'axios';
import NavAdmin from '@/components/NavAdmin';
import AppointmentAction from '@/components/AppointmentAction';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import MenuUsers from '@/components/MenuUsers';

export default function Appointments() {
  const API_URL = "http://localhost:8080/api/appointment";

  const [appointments, setAppointments] = useState([]);
  const [filteredAppointments, setFilteredAppointments] = useState([]); 
  const [searchId, setSearchId] = useState(""); 
  const [startDate, setStartDate] = useState(""); 
  const [endDate, setEndDate] = useState(""); 
  const [error, setError] = useState(null); 

  useEffect(() => {
    const getAllAppointments = async () => {
      try {
        const response = await Axios.get(API_URL);

        if (response.data.appointments) {
          setAppointments(response.data.appointments);
          setFilteredAppointments(response.data.appointments); 
        } else if (response.data.msg) {
          setError(response.data.msg);
          setAppointments([]);
        }
      } catch (error) {
        console.error('Erro ao buscar os Agendamentos:', error);
        if (error.response && error.response.status === 404) {
          setError('Nenhum agendamento encontrado!');
        } else {
          setError('Erro ao buscar os agendamentos.');
        }
      }
    };

    getAllAppointments();
  }, []);

  const handleSearchById = (event) => {
    const value = event.target.value;
    setSearchId(value);

    const filtered = appointments.filter(appointment =>
      appointment._id.includes(value)
    );
    setFilteredAppointments(filtered);
  };

  const handleSearchByDate = () => {
    if (!startDate || !endDate) {
      alert('Por favor, preencha ambas as datas para buscar.');
      return;
    }
  
    const start = new Date(`${startDate}T00:00:00`).toISOString(); 
    const end = new Date(`${endDate}T23:59:59`).toISOString();     
  
    if (new Date(start) > new Date(end)) {
      alert('A data inicial não pode ser maior que a data final.');
      return;
    }
  
    Axios.get(`${API_URL}/dateInterval/date-range`, {
      params: { startDate: start, endDate: end }
    })
      .then(response => {
        setFilteredAppointments(response.data);
      })
      .catch(error => {
        console.error('Erro ao buscar agendamentos por intervalo de datas:', error);
        alert('Erro ao buscar agendamentos. Verifique o console para mais detalhes.');
      });
  };
  

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuUsers />
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom">
            <h3 className="text-center w-100 fw-bold">LISTAGEM DE AGENDAMENTOS CADASTRADOS</h3>
            <div className="d-flex justify-content-center align-items-center" style={{ width: '100%' }}>
              <div className="d-flex gap-3" style={{ width: '100%', maxWidth: '1000px' }}>
              
                <div className="input-group search-container" style={{ flex: 1 }}>
                  <input
                    type="text"
                    className="form-control search-input"
                    style={{
                      maxWidth: '450px',
                      width: '100%',
                      fontSize: '0.9rem',
                      height: '40px',
                    }}
                    placeholder="Busca por ID"
                    value={searchId}
                    onChange={handleSearchById}
                  />
                  <div className="input-group-append" style={{ cursor: 'pointer' }}>
                    <span
                      className="input-group-text"
                      style={{
                        height: '40px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        borderRadius: '0',
                        padding: '0 10px',
                        cursor: 'pointer',
                      }}
                    >
                      <i className="fas fa-search" style={{ fontSize: '1rem' }}></i>
                    </span>
                  </div>
                </div>

                <div className="input-group search-container" style={{ flex: 1 }}>
                  <div style={{ display: 'flex', gap: '10px', alignItems: 'center', width: '100%' }}>
                    
                    <input
                      type="date"
                      className="form-control search-input"
                      style={{
                        fontSize: '0.9rem',
                        height: '40px',
                        width: '100%',
                      }}
                      value={startDate}
                      onChange={(e) => setStartDate(e.target.value)}
                    />
                    
                    <input
                      type="date"
                      className="form-control search-input"
                      style={{
                        fontSize: '0.9rem',
                        height: '40px',
                        width: '100%',
                      }}
                      value={endDate}
                      onChange={(e) => setEndDate(e.target.value)}
                    />
                    
                    <div className="input-group-append" style={{ cursor: 'pointer' }}>
                      <span
                        className="input-group-text"
                        style={{
                          height: '40px',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          borderRadius: '0',
                          padding: '0 10px',
                          cursor: 'pointer',
                        }}
                        onClick={handleSearchByDate}
                      >
                        <i className="fas fa-search" style={{ fontSize: '1rem' }}></i>
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {error && <div className="alert alert-danger" role="alert">{error}</div>}

            <table className="table table-hover">
              <thead>
                <tr>
                  <th scope="col" className="text-center">ID</th>
                  <th scope="col" className="text-center">Especialidade</th>
                  <th scope="col" className="text-center">Data</th>
                  <th scope="col" className="text-center">Estudante</th>
                  <th scope="col" className="text-center">Profissional</th>
                  <th scope="col" className="text-center">Ação</th>
                </tr>
              </thead>
              <tbody>
                {filteredAppointments.map(appointment => (
                  <tr key={appointment._id}>
                    <th scope="row" className="text-center">{appointment._id}</th>
                    <td className="text-center">{appointment.specialty}</td>
                    <td className="text-center">{appointment.date}</td>
                    <td className="text-center">{appointment.student}</td>
                    <td className="text-center">{appointment.professional}</td>
                    <td className="text-center">
                      <AppointmentAction pid={appointment._id}></AppointmentAction>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </>
  );
}
