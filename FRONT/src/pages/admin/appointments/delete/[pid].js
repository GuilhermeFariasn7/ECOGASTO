import NavAdmin from '@/components/NavAdmin'
import MenuUsers from '@/components/MenuUsers';
import Head from 'next/head'
import Link from 'next/link'
import { useEffect, useState } from 'react';
import Axios from 'axios';
import { useRouter } from 'next/router';

export default function DeleteAppointment() {
    const API_URL = "http://localhost:8080/api/appointment"

    const [appointment, setAppointment] = useState({
        id: "",
        comments: "",
        specialty: "",
        date: "",
        student: "",
        professional: "",
    });

    const router = useRouter();
    const { pid } = router.query;  

    const [message, setMessage] = useState({ message: "", status: "" });

    useEffect(() => {
        if (!pid) return; 

        const getAppointment = async () => {
            try {
                const response = await Axios.get(`${API_URL}/${pid}`);
                const fetchedAppointment = response.data.foundedAppointment;

                const formattedDate = fetchedAppointment.date ? fetchedAppointment.date.replace(" ", "T") : "";
                setAppointment({
                    ...fetchedAppointment,
                    date: formattedDate, 
                });

                setMessage({ message: "Agendamento carregado com sucesso", status: "ok" });
            } catch (error) {
                console.error("Erro ao buscar o agendamento:", error);
                setMessage({ message: "Erro ao buscar o Agendamento!", status: "error" });
            }
        };

        getAppointment();
    }, [pid]); 

    const handleDeleteAppointment = async () => {
        try {
            const response = await Axios.delete(`${API_URL}/${pid}`);  
            setMessage({ message: response.data.msg, status: "ok" });
            router.push('/admin/appointments'); 
        } catch (error) {
            console.error("Erro ao deletar o Agendamento:", error);
            setMessage({ message: "Erro ao deletar o Agendamento!", status: "error" });
        }
    };

    function formatDateTimeForInput(isoDate) {
        return isoDate; 
    }

    return (
        <>
            <Head>
                <title>APP-BC</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <div>
                <NavAdmin />
                <MenuUsers />
                { 
                    message.status === "" ? "" : 
                    message.status === "ok" ? 
                    <div className='alert alert-success' role='alert'>
                        {message.message} <Link className='alert-link' href='/admin/appointments'>Voltar</Link>
                    </div> : 
                    <div className='alert alert-danger' role='alert'>
                        {message.message} <Link className='alert-link' href='/admin/appointments'>Voltar</Link>
                    </div>
                }
            </div>
        
            <div className="d-flex justify-content-center p-2">
                <div className="container">
                    <div className="row border-bottom fw-bold">
                        <h3 className="text-center fw-bold"> DELETAR AGENDAMENTO </h3>
                        <form method="POST">
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="student">Estudante</label>
                                <input type="text" id="student" name="student" className="form-control" value={appointment.student} readOnly />
                            </div>
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="professional">Profissional</label>
                                <input type="text" id="professional" name="professional" className="form-control" value={appointment.professional} readOnly />
                             </div>
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="specialty">Especialidade</label>
                                <input type="text" id="specialty" name="specialty" className="form-control" value={appointment.specialty} readOnly/>
                            </div>
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="date">Data</label>
                                <input type="datetime-local" id="date" name="date" className="form-control" value={formatDateTimeForInput(appointment.date)} readOnly />
                            </div>
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="comments">Coment√°rios</label>
                                <input type="text" id="comments" name="comments" className="form-control" value={appointment.comments} readOnly/>
                            </div>
                            <div className="form-group p-2">
                                <button className="btn btn-danger fw-bold mx-1" type="button" onClick={handleDeleteAppointment}>DELETAR</button>
                                <Link className="btn btn-secondary fw-bold mx-1" href="/admin/appointments">VOLTAR</Link>
                            </div>
                        </form>
                    </div>
                </div>
            </div>  
        </>
    );
}
