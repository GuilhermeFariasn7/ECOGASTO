import NavAdmin from '@/components/NavAdmin';
import MenuUsers from '@/components/MenuUsers';
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import Axios from 'axios';
import { useRouter } from 'next/router';

export default function deleteUser() {
  
  const API_URL = "http://localhost:8080/api/user";

  const [user, setUser] = useState({
    id: "",
    name: "",
    email: "",
    user: "",
    pwd: "",
    level: "",
    status: "",
    //create_date: ""
  });

  const router = useRouter();
  const [pid] = useState(router.query.pid);

  const [message, setMensage] = useState({ message: "", status: "" });
  
  const [showModal, setShowModal] = useState(false); 

  const optionsLevel = [
    { value: '', text: '-- Selecione um nível de acesso --' },
    { value: 'admin', text: 'Administrador' },
    { value: 'user', text: 'Usuário' },
    { value: 'reader', text: 'Leitor' },
  ];

  const optionsStatus = [
    { value: '', text: '-- Selecione um estado --' },
    { value: 'true', text: 'Ativo' },
    { value: 'false', text: 'Inativo' },
  ];

  useEffect(() => {
    if (!pid) return; 

    const getUser = async () => {
      try {
        const response = await Axios.get(`${API_URL}/${pid}`); 
        setMensage({ message: response.data.message, status: "ok" });
        setUser(response.data.foundedUser);
      } catch (error) {
        console.error("Erro ao buscar o usuário:", error);
        setMensage({ message: "Erro ao buscar o Usuário!", status: "error" });
      }
    };

    getUser();
  }, [pid]);

  const handleDeleteUser = async () => {
    try {
      const response = await Axios.delete(`${API_URL}/${pid}`); 
      setMensage({ message: response.data.msg, status: "ok" });
      router.push('/admin/users'); 
    } catch (error) {
      console.error("Erro ao deletar o Usuário:", error);
      setMensage({ message: "Erro ao deletar o Usuário!", status: "error" });
    }
  };

  const confirmDelete = () => {
    setShowModal(true); 
  };

  const cancelDelete = () => {
    setShowModal(false); 
  };

  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuUsers />
      </div>

      <div className="d-flex justify-content-center p-2">
        <div className="container">
          <div className="row border-bottom fw-bold">
            <h3 className="text-center fw-bold">DELETAR USUÁRIO</h3>

            <form method="POST">
              <div className="form-group">
                <label className="form-label mt-2 mb-0" htmlFor="name">Nome</label>
                <input type="text" id="name" name="name" className="form-control" value={user.name} readOnly />
              </div>
              <div className="form-group">
                <label className="form-label mt-2 mb-0" htmlFor="email">E-mail</label>
                <input type="text" id="email" name="email" className="form-control" value={user.email} readOnly />
              </div>
              <div className="form-group">
                <label className="form-label mt-2 mb-0" htmlFor="user">Usuário</label>
                <input type="text" id="user" name="user" className="form-control" value={user.user} readOnly />
              </div>
              <div className="form-group">
                <label className="form-label mt-2 mb-0" htmlFor="pwd">Senha</label>
                <input type="password" id="pwd" name="pwd" className="form-control" value={user.pwd} readOnly />
              </div>
              <div className="form-group">
                <label className="form-label mt-2 mb-0" htmlFor="level">Nível</label>
                <select className="form-select" id="level" name="level" value={user.level} readOnly>
                  {optionsLevel.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.text}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label className="form-label mt-2 mb-0" htmlFor="status">Status</label>
                <select className="form-select" id="status" name="status" value={user.status} readOnly>
                  {optionsStatus.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.text}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group p-2">
                <button className="btn btn-danger fw-bold mx-1" type="button" onClick={confirmDelete}>DELETAR</button>
                <Link className="btn btn-secondary fw-bold mx-1" href="/admin/users">VOLTAR</Link>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      {/* Modal de confirmação */}
      {showModal && (
        <div className="modal show" tabIndex="-1" style={{ display: "block", position: "absolute", top: "50%", left: "50%", transform: "translate(-50%, -50%)", zIndex: 1050 }}>
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title fw-bold">CONFIRMAR EXCLUSÃO</h5>
              </div>
              <div className="modal-body">
                <p>Tem certeza de que deseja excluir este usuário?</p>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-secondary text-white mx-1 fw-bold" onClick={cancelDelete}>CANCELAR</button>
                <button type="button" className="btn btn-danger mx-1 fw-bold" onClick={handleDeleteUser}>CONFIRMAR</button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
