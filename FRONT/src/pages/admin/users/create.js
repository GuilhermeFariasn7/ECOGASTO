import Head from 'next/head';
import Link from 'next/link';
import NavAdmin from '@/components/NavAdmin';
import MenuUsers from '@/components/MenuUsers';     
import { useState } from 'react';
import Axios from 'axios';
import { useRouter } from 'next/router';

export default function CreateUser() {
    const API_URL = "http://localhost:8080/api/user";

    const router = useRouter();

    const [user, setUser] = useState({
        name: "",
        email: "",
        user: "",
        pwd: "",
        level: "",
        status: 'true', // Inicia com 'true'
    });

    const [message, setMessage] = useState({ message: "", status: "" });
    const [errors, setErrors] = useState({}); // Estado para armazenar os erros
    const [showPassword, setShowPassword] = useState(false); // Controle de visibilidade da senha

    const optionsLevel = [
        { value: '', text: '-- Selecione um nível de acesso --' },
        { value: 'admin', text: 'Administrador' },
        { value: 'user', text: 'Usuário' },
        { value: 'reader', text: 'Leitor' },
    ];

    const handleChange = (event) => {
        const { name, value } = event.target;
        setUser({
            ...user,
            [name]: value,
        });
        // Remove o erro quando o campo é preenchido
        if (value.trim()) {
            setErrors({ ...errors, [name]: false });
        }
    };

    const togglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    const validateFields = () => {
        const newErrors = {};
        if (!user.name.trim()) newErrors.name = true;
        if (!user.email.trim()) newErrors.email = true;
        if (!user.user.trim()) newErrors.user = true;
        if (!user.pwd.trim()) newErrors.pwd = true;
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleCreateUser = async () => {
        if (!validateFields()) {
            setMessage({
                message: "Por favor, preencha todos os campos obrigatórios.",
                status: "error",
            });
            return;
        }

        try {
            
            const response = await Axios.post(API_URL, user);
            if (response.status === 200) {
                setMessage({ message: "Usuário salvo com sucesso!", status: "ok" });
                router.push('/');
            }
        } catch (error) {
            if (error.response) {
                const errorMessage = error.response.data.msg || "Erro desconhecido.";
                setMessage({ message: errorMessage, status: "error" });
            } else {
                setMessage({ message: "Erro ao criar o Usuário!", status: "error" });
            }
        }
    };

    return (
        <>
            <Head>
                <title>APP-BC</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <div>
                <NavAdmin />
                <MenuUsers />
            </div>

            <div className="container mt-2">
                {message.status === "ok" && (
                    <div className="alert alert-success alert-dismissible fade show" role="alert">
                        {message.message}
                    </div>
                )}
                {message.status === "error" && (
                    <div className="alert alert-danger alert-dismissible fade show" role="alert">
                        {message.message}
                    </div>
                )}
            </div>

    <div className="d-flex justify-content-center ">
        <div className="container">
            <div className="row border-bottom fw-bold">
                <h3 className='fw-bold text-center'> CADASTRO DE USUÁRIO </h3>

                        <form method="POST">
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="name">
                                    Nome <span className="text-danger">*</span>
                                </label>
                                <input
                                    type="text"
                                    id="name"
                                    name="name"
                                    className={`form-control ${errors.name ? 'is-invalid' : ''}`}
                                    value={user.name}
                                    onChange={handleChange}
                                />
                            </div>
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="email">
                                    E-mail <span className="text-danger">*</span>
                                </label>
                                <input
                                    type="text"
                                    id="email"
                                    name="email"
                                    className={`form-control ${errors.email ? 'is-invalid' : ''}`}
                                    value={user.email}
                                    onChange={handleChange}
                                />
                            </div>
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="user">
                                    Usuário <span className="text-danger">*</span>
                                </label>
                                <input
                                    type="text"
                                    id="user"
                                    name="user"
                                    className={`form-control ${errors.user ? 'is-invalid' : ''}`}
                                    value={user.user}
                                    onChange={handleChange}
                                />
                            </div>
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="pwd">
                                    Senha <span className="text-danger">*</span>
                                </label>
                                <div className="input-container" style={{ position: 'relative' }}>
                                    <input
                                        type={showPassword ? 'text' : 'password'}
                                        id="pwd"
                                        name="pwd"
                                        className={`form-control ${errors.pwd ? 'is-invalid' : ''}`}
                                        value={user.pwd}
                                        onChange={handleChange}
                                    />
                                    <button
                                        type="button"
                                        className="btn btn-link"
                                        style={{
                                            position: 'absolute',
                                            right: '25px',
                                            top: '50%',
                                            transform: 'translateY(-50%)',
                                            color: 'black',
                                            textDecoration: 'none',
                                        }}
                                        onClick={togglePasswordVisibility} 
                                    >
                                        <i className={showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'}></i>
                                    </button>
                                </div>
                            </div>
                            <div className="form-group">
                                <label className="form-label mt-2 mb-0" htmlFor="level">Nível</label>
                                <select className="form-select" id="level" name="level" value={user.level} onChange={handleChange}>
                                    {optionsLevel.map(option => (
                                        <option key={option.value} value={option.value}>
                                            {option.text}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div className="form-group p-2">
                                <button className="btn btn-success mx-1 fw-bold" type="button" onClick={handleCreateUser}>SALVAR</button>
                                <Link className="btn btn-secondary text-white mx-1 fw-bold" href="/admin">VOLTAR</Link>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </>
    );
}
